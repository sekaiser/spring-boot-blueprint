buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
	}
	repositories {
		gradlePluginPortal()
		jcenter()
	}
	dependencies {
		classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2"
		classpath "org.ajoberstar.grgit:grgit-gradle:3.0.0-beta.1"
		classpath "org.ajoberstar:gradle-git-publish:1.0.1"
		classpath "org.ajoberstar.grgit:grgit-gradle:3.0.0-beta.1"
		classpath "org.ajoberstar:gradle-git-publish:1.0.1"
		classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.5.2"
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "io.franzbecker:gradle-lombok:1.14"
		classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
		classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.6"
	}
}

apply plugin: 'com.github.kt3k.coveralls'
apply plugin: "org.ajoberstar.grgit"
apply plugin: "org.ajoberstar.git-publish"

allprojects {
	apply plugin: "jacoco"
	apply plugin: "idea"
	apply plugin: "eclipse"

	repositories {
		jcenter()
		maven {
			url "https://repo.spring.io/snapshot"
		}
	}
}

idea {
	project {
		jdkName = "1.8"
		languageLevel = "1.8"
		vcs = "Git"
	}
}


apply plugin: "java"
apply plugin: "checkstyle"
apply plugin: "com.github.spotbugs"
apply plugin: "pmd"
apply plugin: 'org.springframework.boot'
apply plugin: "io.spring.dependency-management"
apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: "groovy"
apply plugin: "io.franzbecker.gradle-lombok"

group = "de.seka.news"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

task removeIdeaOutDirectory(type: Delete) {
	file("${projectDir}/out").deleteDir()
}

clean {
	dependsOn(removeIdeaOutDirectory)
}

compileJava {
	options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
	options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

tasks.withType(Test) {
	task ->
		// set heap size for the test JVM(s)
		minHeapSize = "256m"
		maxHeapSize = "2g"

		// Environment properties to be forwarded to the test runtime
		[
				"CI",
				"INTEGRATION_TEST_DB",
		].each { envVariableName ->
			if (System.getenv(envVariableName) != null) {
				systemProperty envVariableName, System.getenv(envVariableName)
			}
		}

		reports.html.setDestination(new File("${reporting.baseDir}/test/${task.name}"))
		jacocoTestReport.getExecutionData().plus(files("$buildDir/jacoco/${task.name}.exec"))
}

test {
	testLogging {
		if (System.getenv("CI") != null) {
			events "passed", "skipped", "failed"
		} else {
			events "failed"
		}
	}
}

checkstyle {
	configFile = new File(project.projectDir, "codequality/checkstyle/checkstyle.xml")
	toolVersion = "8.13"
}

spotbugs {
	excludeFilter = new File(project.projectDir, "codequality/spotbugs/excludeFilter.xml")
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

pmd {
	toolVersion = "6.10.0"
}

tasks.withType(Pmd) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

jacocoTestReport {
	reports {
		html.enabled = true
		xml.enabled = true
		csv.enabled = false
	}
}

lombok {
	version = "1.18.4"
}

repositories {
	mavenCentral()
}

task codeCoverageReport(type: JacocoReport, group: "Coverage reports") {
	executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

	dependsOn *.test

	reports {
		xml.enabled = true
		xml.destination new File("${buildDir}/reports/jacoco/report.xml")
		html.enabled = true
		html.destination new File("${buildDir}/reports/jacoco/html")
		csv.enabled = false
	}
}

coveralls {
	sourceDirs = this.sourceSets.main.allSource.srcDirs.flatten().<String>asList()
	jacocoReportPath = "${project.buildDir}/reports/jacoco/report.xml"
}

tasks.coveralls {
	group = "Coverage reports"
	description = "Uploads the aggregated coverage report to Coveralls"

	dependsOn codeCoverageReport
	onlyIf {
		System.env."CI"
	}
}

task addNewMigration(group: "other") {
	doLast {
		def timestamp = new Date().format("yyyyMMddHHmmssSSS", TimeZone.getTimeZone("GMT"))
		def fileName = "./src/main/resources/db/migration/" + "V" + timestamp + "___" + migrationName + ".sql"
		file(new File(fileName)).createNewFile()
	}
}

task unitTests(type: Test, group: "verification") {
	useJUnit {
		includeCategories "de.seka.news.test.categories.UnitTest"
		excludeCategories "de.seka.news.test.categories.IntegrationTest"
		excludeCategories "de.seka.news.test.categories.DocumentationTest"
	}
	outputs.upToDateWhen {
		return false
	}
}

task integrationTests(type: Test, group: "verification") {
	useJUnit {
		includeCategories "de.seka.news.test.categories.IntegrationTest"
		excludeCategories "de.seka.news.test.categories.UnitTest"
		excludeCategories "de.seka.news.test.categories.DocumentationTest"
	}
	outputs.upToDateWhen {
		return false
	}
}

task documentationTests(type: Test, group: "verification") {
	useJUnit {
		includeCategories "de.seka.news.test.categories.DocumentationTest"
		excludeCategories "de.seka.news.test.categories.UnitTest"
		excludeCategories "de.seka.news.test.categories.IntegrationTest"
	}
	outputs.upToDateWhen {
		return false
	}
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-data-rest')
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.flywaydb:flyway-core')
	implementation('net.sf.supercsv:super-csv:2.4.0')
	implementation("com.google.code.findbugs:annotations:3.0.1")
	implementation('javax.xml.bind:jaxb-api:2.3.0')
	implementation('javax.activation:activation:1.1')
	implementation('org.glassfish.jaxb:jaxb-runtime:2.3.0')
	runtimeOnly('org.springframework.boot:spring-boot-devtools')
	runtimeOnly('com.h2database:h2')
	runtimeOnly('org.postgresql:postgresql')
	compileOnly('org.projectlombok:lombok')
	testImplementation('org.hamcrest:hamcrest-all:1.3')
	testImplementation('org.mockito:mockito-all:1.10.19')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
	testImplementation('org.springframework.security:spring-security-test')
}
